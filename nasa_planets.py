# -*- coding: utf-8 -*-
"""Nasa_Planets.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k8j0sl1UuJSVJ97oWEFHTEk4t1ASpwAw

# Phase 1: Ingest & Inspect the Data üßê

**First step is to load the data and perform a quick check to see what we're working with. We'll look for things like column names, data types, and the presence of any missing values.**
"""

# Import the pandas library to work with DataFrames
import pandas as pd

# Load the dataset. Replace 'your_dataset.csv' with the actual filename.
df = pd.read_csv('cleaned_5250.csv')

"""**Here's our first look at the data. We'll check the first few rows,
a summary of the columns, and the data types etc**
"""

# Display the first 5 rows of the DataFrame
print(df.head())

# Get a concise summary of the DataFrame, including data types and non-null counts
print(df.info())

# Show basic statistics for numerical columns
print(df.describe())

"""#Phase 2: Data Cleaning & Preparation üßπ

**Our first priority is to clean up the data so that we can accurately calculate the mass and radius of each planet, which are core to the analysis.**
"""

# Step 1: Check for and remove duplicate rows
initial_rows = len(df)
df.drop_duplicates(inplace=True)
rows_after_dedup = len(df)
print(f"Number of duplicate rows removed: {initial_rows - rows_after_dedup}")

# Step 2: Handle missing values in our core calculation columns
# Dropping rows with missing 'mass_wrt' or 'radius_wrt' is best,
# as these are critical for the mass and radius calculations.
df.dropna(subset=['mass_wrt', 'radius_wrt'], inplace=True)

# Let's check the number of rows left and the null counts again to confirm
print(f"Number of rows after handling core missing values: {len(df)}")
print("\nNull counts after cleanup:")
print(df.isnull().sum())

"""**We will create two dictionaries to map the planet names from the 'mass_wrt' and 'radius_wrt' columns to their actual values in kilograms and meters.**"""

# Define the mass of Earth and Jupiter in kilograms (kg)
mass_in_kg = {
    'Earth': 5.972e+24,
    'Jupiter': 1.898e+27
}

# Define the radius of Earth and Jupiter in meters (m)
radius_in_m = {
    'Earth': 6.371e+6,
    'Jupiter': 7.149e+7
}

# Now, we'll create the new columns by applying a function
# that performs the calculation.

# Calculate the mass of the planet in kg
df['mass'] = df['mass_multiplier'] * df['mass_wrt'].map(mass_in_kg)

# Calculate the radius of the planet in meters
df['radius'] = df['radius_multiplier'] * df['radius_wrt'].map(radius_in_m)

# Let's check the new columns and confirm their data types
print(df[['name', 'mass', 'radius']].head())
print(df.info())

"""# Phase 3: Analysis & Visualization üìä

**Insight 1: What is the distribution of different planet types?**
"""

# exploring the distribution of planet types.

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 6))
# Count the occurrences of each planet type and sort them
planet_type_counts = df['planet_type'].value_counts()
sns.barplot(x=planet_type_counts.index, y=planet_type_counts.values, palette='viridis')

plt.title('Distribution of Exoplanet Types', fontsize=16)
plt.xlabel('Planet Type', fontsize=12)
plt.ylabel('Number of Planets', fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""**Insight 2: What is the relationship between a planet's mass and its radius?**"""

# visualizing the relationship between planet mass and radius.

plt.figure(figsize=(10, 6))
# Using a scatter plot to show the relationship
sns.scatterplot(x=df['radius'], y=df['mass'], alpha=0.6)

plt.title('Mass vs. Radius of Exoplanets', fontsize=16)
plt.xlabel('Radius (m)', fontsize=12)
plt.ylabel('Mass (kg)', fontsize=12)
plt.ticklabel_format(style='sci', axis='x', scilimits=(0,0))
plt.ticklabel_format(style='sci', axis='y', scilimits=(0,0))
plt.grid(True)
plt.tight_layout()
plt.show()

"""**Insight 3: How has the discovery of exoplanets changed over the years?**"""

# analyzing the trend of planet discovery over time.

# Group by 'discovery_year' and count the number of planets
discoveries_per_year = df['discovery_year'].value_counts().sort_index()

plt.figure(figsize=(12, 6))
# Use a line chart to show the trend
sns.lineplot(x=discoveries_per_year.index, y=discoveries_per_year.values, marker='o')

plt.title('Exoplanet Discoveries by Year', fontsize=16)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Number of Discoveries', fontsize=12)
plt.grid(True)
plt.show()

"""# Conclusion: A Decade of Discovery in Exoplanets

Our findings reveal three key insights:

* **A "Neptune-like" Universe:** The first and most significant finding is that our universe of discovered exoplanets is predominantly filled with **Neptune-like planets**, which make up the largest proportion of our sample with over 1750 discoveries. This is followed by a similar count of **gas giants** and **super-Earths**, with terrestrial (Earth-like) planets being far less common. This insight provides a foundational understanding of the physical composition of planets that have been discovered to date.

* **The Mass-Radius Anomaly:** Our second analysis on the mass and radius of these planets revealed a clear concentration of discoveries at the lower end of the scale. A large cluster of planets with a very low mass (around 0.1 of a Jupiter mass) and a small radius (0-1.5 Jupiter radii) suggests that smaller planets, like our own, are being discovered with increasing frequency.

* **The Discovery Boom:** Finally, the most striking trend in our data is the massive spike in exoplanet discoveries starting in **2014**. Before this period, discoveries were consistently below 200 per year. However, following the launch of new planet-hunting telescopes, this number skyrocketed to over 1400 in 2015, before stabilizing to around 400 after 2021. This clearly shows how technological advancements can accelerate our understanding of the cosmos.

In summary, our analysis demonstrates that while the discovery of exoplanets has been revolutionized by new technology, the majority of planets we have found so far are significantly different in size and composition than our own.
"""